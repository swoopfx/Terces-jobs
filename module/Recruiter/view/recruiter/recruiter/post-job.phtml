<?php echo $this->headtitle("Recruiter Post job"); ?>

<link rel="stylesheet" href="https://unpkg.com/vue3-form-wizard/dist/style.css">
<link rel="stylesheet" href="https://unpkg.com/@vueup/vue-quill@1.2.0/dist/vue-quill.snow.prod.css">
<div id="postjob">
    <div class="parallax overflow-hidden bg-blue-400 page-section third">
        <div class="container parallax-layer" data-opacity="true">
            <div class="media v-middle">
                <div class="media-left text-center">

                </div>
                <div class="media-body">
                    <h1 class="text-white text-display-1 margin-v-0">John Doe</h1>

                </div>

            </div>
        </div>
    </div>



    <div class="container">

        <div class="page-section">
            <div class="row">



                <div class="col-md-9">

                    <h2 class="page-section-heading">Post a Job</h2>
                    <div class="panel panel-default">
                        <div class="panel-body">

                            <form-wizard @on-complete="onComplete" @on-validate="handleValidation" @on-loading="setLoading" color="#064E3B">
                                <tab-content :before-change="validateAsync" title="Basic Job info">

                                    <?= $this->partial("recruiterPartial-basic-form-job-info") ?>

                                </tab-content>
                                <tab-content :before-change="validateAsync" title="Job Description">
                                    <?= $this->partial("recruiterPartial-job-description-form"); ?>
                                </tab-content>
                                <tab-content :before-change="validateAsync" title="Overview">
                                    <?= $this->partial("recruiterPartial-job-overview-form"); ?>
                                </tab-content>
                                <div class="loader" v-if="loadingWizard"></div>
                            </form-wizard>

                        </div>
                    </div>




                    <br />
                    <br />

                </div>
                <div class="col-md-3">

                    <div class="panel panel-default" data-toggle="panel-collapse" data-open="true">
                        <div class="panel-heading panel-collapse-trigger">
                            <h4 class="panel-title">Resources</h4>
                        </div>
                        <div class="panel-body list-group">
                            <ul class="list-group list-group-menu">
                                <li class="list-group-item active"><a class="link-text-color" href="website-take-course.html">Curriculum</a></li>
                                <li class="list-group-item"><a class="link-text-color" href="website-course-forums.html">Course Forums</a></li>
                                <li class="list-group-item"><a class="link-text-color" href="website-take-quiz.html">Take Quiz</a></li>
                                <li class="list-group-item"><a class="link-text-color" href="website-quiz-results.html">Quiz Results</a></li>
                            </ul>
                        </div>
                    </div>
                    <!--
                    <div class="panel panel-default" data-toggle="panel-collapse" data-open="true">
                        <div class="panel-heading panel-collapse-trigger">
                            <h4 class="panel-title">Instructor</h4>
                        </div>
                        <div class="panel-body">
                            <div class="media v-middle">
                                <div class="media-left">
                                    <img src="images/people/110/guy-6.jpg" alt="About Adrian" width="60" class="img-circle" />
                                </div>
                                <div class="media-body">
                                    <h4 class="text-title margin-none"><a href="#">Adrian Demian</a></h4>
                                    <span class="caption text-light">Biography</span>
                                </div>
                            </div>
                            <br />
                            <div class="expandable expandable-indicator-white expandable-trigger">
                                <div class="expandable-content">
                                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. A accusamus aut consectetur consequatur cum cupiditate debitis doloribus, error ex explicabo harum illum minima mollitia nisi nostrum officiis omnis optio qui quisquam saepe sit
                                        sunt totam vel velit voluptatibus? Adipisci ducimus expedita id nostrum quas quia!</p>
                                </div>
                            </div>
                        </div>
                    </div> -->

                </div>

            </div>
        </div>

    </div>
</div>
<script src="https://unpkg.com/vue3-form-wizard"></script>
<script src="https://unpkg.com/@vueup/vue-quill@1.2.0"></script>


<style>
    .loader,
    .loader:after {
        border-radius: 50%;
        width: 10em;
        height: 10em;
    }

    .loader {
        margin: 60px auto;
        font-size: 10px;
        position: relative;
        text-indent: -9999em;
        border-top: 1.1em solid rgba(255, 255, 255, 0.2);
        border-right: 1.1em solid rgba(255, 255, 255, 0.2);
        border-bottom: 1.1em solid rgba(255, 255, 255, 0.2);
        border-left: 1.1em solid #064E3B;
        -webkit-transform: translateZ(0);
        -ms-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-animation: load8 1.1s infinite linear;
        animation: load8 1.1s infinite linear;
    }

    @-webkit-keyframes load8 {
        0% {
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
        }

        100% {
            -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
        }
    }

    @keyframes load8 {
        0% {
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
        }

        100% {
            -webkit-transform: rotate(360deg);
            transform: rotate(360deg);
        }
    }
</style>
<script>
    const postJobApp = Vue.createApp({
        data() {
            return {
                // Begin Prresets
                activeCountries: [],
                workplaceTypes: [],
                jobTypes: [],
                jobApplyLink: [],
                marketing: [],
                jobScreeningQuestions: [],
                activeJobCountry: [],
                showcustomApplyLink: false,
                applyLinkLabel: "",

                selectedJobScreeningQuestions: [],
                selectedWorkplaceType: "",
                seletedJobType: "",
                selectedCompany: "",
                selectedCountry: "",
                selectedApplyLink: "",
                selectedMarketing: "",
                validationMessage: "",
                isSearchSkills: false,
                isMarketingOthers: false,
                skillSearchParameter: "",
                skillsearchResult: [],
                selectedSkills: new Array(),
                skillMinYears: 0,
                positionSearchResult: [],
                selectedPosition: "",
                searchPositionParameter: "",
                vOtherMarketing: "",
                // End Presets

                postjobs: [],
                jobTitle: "",
                jobDescrpption: "",
                jobType: "",
                jobWorkplaceType: "",
                jobLocation: "",
                skills: [],
                qualifications: [],
                isValid: false,
                isFormValid: false,
                externalLink:false,
                activeTab: 0,
                loadingWizard: false
            }
        },

        mounted() {
            // this.getWorkType();
            this.getworkplaceType();
            this.getJobType()
            this.getJobApplyLink();
            this.getmarketing();
            this.getJobScreeningQuestions();
            this.getCountries();
        },

        methods: {


            // getter
            /**
             * GetsCompanies associated to the user
             */
            getUserCompany() {

            },

            getCountries() {
                axios.get("/recruit/recruiter/web/get-country").then((result) => {
                    this.activeJobCountry = result.data.data;
                }).catch((err) => {
                    this.$toast.open({
                        message: "Preload error",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                });
            },

            /**
             * get Marketing tools  where customer got information about the app
             */
            getmarketing() {
                axios.get("/recruit/recruiter/web/get-marketing").then((result) => {
                    this.marketing = result.data.data;
                }).catch((err) => {
                    this.$toast.open({
                        message: "Preload error",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                });
            },

            /**
             * Gets the workplace type
             */
            getworkplaceType() {
                axios.get("/recruit/recruiter/web/get-workplace-type").then((result) => {
                    this.workplaceTypes = result.data.data;
                }).catch((err) => {
                    this.$toast.open({
                        message: "Preload error",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                });
            },

            getJobPositions() {

            },

            getJobType() {
                axios.get("/recruit/recruiter/web/get-job-type").then((result) => {
                    this.jobTypes = result.data.data;
                }).catch((err) => {
                    this.$toast.open({
                        message: "Preload error",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                });
            },

            getActiveCountry() {
                axios.get("/recruit/recruiter/web/get-active-country").then((result) => {
                    this.activeCountries = result.data.data;
                }).catch((err) => {
                    this.$toast.open({
                        message: "Preload error",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                });
            },

            getJobApplyLink() {
                axios.get("/recruit/recruiter/web/get-job-apply-links").then((result) => {
                    this.jobApplyLink = result.data.data;
                }).catch((err) => {
                    this.$toast.open({
                        message: "Preload error",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                });
            },

            getJobSkill() {

                axios.get("/recruit/recruiter/web/get-job-skills").then((result) => {
                    this.skills = result.data.data;
                }).catch((err) => {
                    this.$toast.open({
                        message: "Preload error",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                });
            },

            getJobScreeningQuestions() {

                axios.get("/recruit/recruiter/web/get-job-screening-quastions").then((result) => {
                    this.jobScreeningQuestions = result.data.data;

                }).catch((err) => {
                    this.$toast.open({
                        message: "Preload error",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                });
            },
            // End getters


            // begin Validators
            validateBasic() {

                if (this.$refs.vJobTitle.value == "") {
                    this.validationMessage = "Job Title is required";
                    return false;
                } else if (this.selectedWorkplaceType == "") {
                    this.validationMessage = "Work Place Type is required";

                    return false;
                } else if (this.selectedCompany == "") {
                    this.validationMessage = "Please select a Company "
                    return false;
                } else if (this.seletedJobType == "") {
                    this.validationMessage = "Please select a Job Type "
                    return false;
                } else if (this.selectedCountry == "") {
                    this.validationMessage = "Please select country of reference"
                    return false;
                } else if (true) {
                    // validates if the user has enogh credit to make the call 

                    return true;
                } else {
                    return true;
                }
            },

            validateJobDescription() {
                let quill = this.$refs.vjDesc.getQuill();
                // console.log(quill);
                // console.log(quill.root.innerText);
                if (quill.root.innerText == "\n") {
                    this.validationMessage = "Please provide a detailed description of this job ";
                    return false;
                } else if (quill.root.innerText.length < 10) {
                    this.validationMessage = "The description should be well detailed";
                    return false;
                } else if (this.selectedSkills.length < 1) {
                    this.validationMessage = "Your are required to select a skill";
                    return false;
                } else {
                    return true
                }
                // else if(){

                // }

            },

            validateOverview() {
                return true;
            },
            // end validation

            setLoading(value) {
                this.loadingWizard = value
            },

            searchskills() {

                if (this.skillSearchParameter.length > 0) {
                    axios.get("/recruit/recruiter/web/search-skills/" + this.skillSearchParameter).then(res => {
                        if (res.status == 200) {
                            this.skillsearchResult = res.data.data;
                            // this.isSearchingCategory = false;
                        }
                    }).catch(() => {
                        this.$toast.open({
                            message: "Preload error",
                            type: "error",
                            position: "top-left",
                            duration: 20000,
                            dismissible: true
                        });
                    });
                }

            },

            onSelectSkill(dt) {
                this.skillSearchParameter = "";
                this.skillsearchResult = "";
                if (this.selectedSkills.length >= 10) {
                    this.$toast.open({
                        message: "Reached Maximum allowed skills",
                        type: "error",
                        position: "top-left",
                        duration: 20000,
                        dismissible: true
                    });
                } else {
                    dt.isRequired = false;
                    dt.years = 0;
                    this.selectedSkills.push(dt);
                    // console.log(this.selectedSkills);
                }
            },

            //used to extend the propery, identifiyin if skill is required
            onExtendSelectedSkillPropertyWithRequired(key, value) {
                this.selectedSkills[key].isRequired = value;
            },

            //used to extend the propery, with minimum number of years
            onExtendSelectedSkillPropertyWithMinYears(e, key) {
                // console.log(e.target.value);
                this.selectedSkills[key].years = e.target.value;
                // console.log(this.selectedSkills);
            },

            // used to remove an object from a selected skill
            onRemoveFromSelectedSkill(inn) {
                this.selectedSkills.splice(inn, 1);
                // console.log(this.selectedSkills);
            },

            onChangeMarketing(e) {
                // console.log(e.target.value);
                if (e.target.value == 1000) {
                    this.isMarketingOthers = true;
                } else {
                    this.isMarketingOthers = false;
                }
            },

            onSelectJobScreeningQuestions(index, data) {
                this.jobScreeningQuestions.splice(index, 1);
                this.selectedJobScreeningQuestions.push(data);
            },

            onRemoveJobScreenQuestions(index, data) {
                this.selectedJobScreeningQuestions.splice(index, 1);
                this.jobScreeningQuestions.push(data);
            },

            selectSearchedSkills() {

            },

            onSearchPosition() {

                if (this.searchPositionParameter.length > 3) {
                    axios.get("/recruit/recruiter/web/search-job-position/" + this.searchPositionParameter).then(res => {
                        if (res.status == 200) {
                            this.positionSearchResult = res.data.data;
                            // this.isSearchingCategory = false;
                        }
                    }).catch(() => {
                        this.$toast.open({
                            message: "Preload error",
                            type: "error",
                            position: "top-left",
                            duration: 20000,
                            dismissible: true
                        });
                    });
                }

            },

            removeSelectedPosition() {
                this.selectedPosition = "";
                this.searchPositionParameter = "";
            },

            onSelectPosition(id) {
                this.selectedPosition = id;
                this.positionSearchResult = []
                this.searchPositionParameter = "";
            },

            // onSelectCountry(data) {
            //     this.selectedCountry = data;
            //     console.log(this.selectedCountry);
            // },

            changeMade(prevIndex, nextIndex) {
                console.log('Previous: ' + prevIndex + ' Next: ' + nextIndex)

            },

            handleValidation(isValid, tabIndex) {
                console.log('Tab: ' + tabIndex + ' valid: ' + isValid);
                if (isValid) {
                    this.activeTab = tabIndex + 1;
                    // this.isFormValid = false;
                }

            },

            validateAsync() {
                return new Promise((resolve, reject) => {
                    setTimeout(() => {

                        // if (this.previousTab < this.nextTab) {
                        if (this.activeTab == 0) {
                            let validate = this.validateBasic();
                            if (validate == false) {
                                this.$toast.open({
                                    message: this.validationMessage,
                                    type: "error",
                                    position: "top-left",
                                    duration: 20000,
                                    dismissible: true
                                });
                                resolve(false);
                            } else {
                                resolve(true);
                            }
                            // resolve(true);
                        } else if (this.activeTab == 1) {
                            let validate = this.validateJobDescription();
                            if (validate == false) {
                                this.$toast.open({
                                    message: this.validationMessage,
                                    type: "error",
                                    position: "top-left",
                                    duration: 20000,
                                    dismissible: true
                                });
                                resolve(false);
                            } else {
                                resolve(true);
                            }
                        } else if (this.activeTab == 2) {
                            let validate = this.validateOverview();
                            if (validate == false) {
                                this.$toast.open({
                                    message: this.validationMessage,
                                    type: "error",
                                    position: "top-left",
                                    duration: 20000,
                                    dismissible: true
                                });
                                resolve(false);
                            } else {
                                resolve(true);
                            }
                        }
                    }, 500)
                })
                // this.$emit('on-complete');
                // return true;
            },


            validateForm(isValid, tabIndex) {
                console.log('Tab: ' + tabIndex + ' valid: ' + isValid)
            },



            // When all validation is true
            onComplete() {
                console.log("Got Here");
                console.log(this.validateBasic());
                console.log(this.validateJobDescription());
                console.log(this.validateOverview());
                if (this.validateBasic() == true && this.validateJobDescription() == true && this.validateOverview() == true) {

                    let formData = new FormData();
                    let quill = this.$refs.vjDesc.getQuill();

                    let descHtml = quill.root.innerHTML;
                  
                    formData.append("jobTitle", this.$refs.vJobTitle.value);
                   
                    formData.append("jobType", this.seletedJobType);
                  
                    formData.append("associatedCompany", this.selectedCompany);
                    formData.append("workplaceType", this.selectedWorkplaceType);
                  
                    formData.append("country", JSON.stringify(this.selectedCountry));
                    formData.append("jobDescription", JSON.stringify(descHtml));
                   
                    formData.append("jobPosition", JSON.stringify(this.selectedPosition));
                    
                    formData.append("skills", JSON.stringify(this.selectedSkills));
                    formData.append("filterQuestions", JSON.stringify(this.selectedJobScreeningQuestions));
                    formData.append("marketing", this.selectedMarketing);
                   
                    formData.append("applyLink", this.selectedApplyLink);
                    formData.append("externalLink", this.externalLink)
                    formData.append("otherMarketing", this.vOtherMarketing);

                    axios.post("/recruit/recruiter/web/post-job", formData).then((result) => {
                        if (result.status == 201) {
                            window.location.href = "/recruit/recruiter/web/view-job/" + result.data.data.uuid
                        }
                    }).catch((err) => {
                        Swal.fire({
                            icon: "error",
                            title: "error",
                            text: err.response.data.messages
                        });
                    });
                } else {
                    console.log("Not Valid");
                }
            },

            clickedApplyLink() {
                // alert(this.selectedApplyLink);
                // console.log(this.selectedApplyLink);
                if (this.selectedApplyLink == 300) {
                    this.applyLinkLabel = "Website Link";
                    this.showcustomApplyLink = true;
                } else if (this.selectedApplyLink == 1000) {

                    this.applyLinkLabel = "Email Address";
                    this.showcustomApplyLink = true;
                } else {
                    this.showcustomApplyLink = false;
                }
            }
        },
    });

    postJobApp.component("FormWizard", Vue3FormWizard.FormWizard);
    postJobApp.component("TabContent", Vue3FormWizard.TabContent);

    postJobApp.use(VueToast.ToastPlugin);
    postJobApp.component('QuillEditor', VueQuill.QuillEditor);
    postJobApp.use(Vue3FormWizard)
    postJobApp.mount("#postjob")
</script>