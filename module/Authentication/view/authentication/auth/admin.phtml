<div class="card-header pb-0 text-left bg-transparent">
    <h3 class="font-weight-bolder text-info text-gradient">Welcome back</h3>
    <p class="mb-0">Enter your email and password to sign in</p>
</div>
<div id="login_app" class="card-body">
    <!-- <form role="form"> -->
    <label>Phone or Email </label>
    <div class="mb-3">
        <input type="email" class="form-control" v-model="email" @blur="validateEmail()" placeholder="Phone or Email" aria-label="Email" aria-describedby="email-addon">
        <span class="floating-placeholder" style="font-size: x-small; color : red;" v-if="msg.email">{{msg.email}}</span>
    </div>
    <label>Password</label>
    <div class="mb-3">
        <input type="password" @input="validatePassword()" @keyup.enter="submitLogin()" class="form-control" v-model="password" placeholder="Password" aria-label="Password" aria-describedby="password-addon">
        <span class="floating-placeholder" style="font-size: x-small; color : red;" v-if="msg.password">{{msg.password}}</span>
    </div>
    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" id="rememberMe" checked="">
        <label class="form-check-label" for="rememberMe">Remember me</label>
    </div>
    <div class="text-center">
        <button @click="submitLogin()" type="button" class="btn bg-gradient-info w-100 mt-4 mb-0">Sign in</button>
    </div>
    <!-- </form> -->

</div>
<div class="card-footer text-center pt-0 px-lg-2 px-1">
    <p class="mb-4 text-sm mx-auto">

        <a href="" class="text-info text-gradient font-weight-bold">Forgot Password</a> 
    </p>
</div>

<script>
    const login_app = Vue.createApp({
        data() {
            return {
                // emailRules: [
                //     v => !!v || 'E-mail is required',
                //     v => /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(v) || 'E-mail must be valid'
                // ],
                email: "",
                password: "",
                isValid: false,
                msg: {
                    email: "",
                    isInvalidEmail: true,
                    password: "",
                    isInValidPassword: true,
                },
                isSubmitting: false,
            }
        },


        methods: {

            validateForm() {
                if (!this.msg.isInvalidEmail && !this.msg.isInValidPassword) {
                    this.isValid = true;
                    // console.log("IsValid");
                } else {
                    this.isValid = false;

                }
            },


            validateEmail() {

                // console.log(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(this.email));
                if (!(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(this.email))) {
                    this.msg.email = 'Please enter a valid email address';
                    this.msg.isInvalidEmail = true;

                } else {
                    this.msg.email = '';
                    this.msg.isInvalidEmail = false;

                }
                this.validateForm()
            },

            validatePassword() {
                if (this.password == "") {
                    this.msg.password = 'Password cannot be empty';
                    this.msg.isInValidPassword = true;

                } else if (this.password.length < 6) {
                    this.msg.password = 'We expect your password should be more than 6 characters';
                    this.msg.isInValidPassword = true;
                } else {
                    this.msg.password = '';
                    this.msg.isInValidPassword = false;
                }
                this.validateForm();
            },

            submitLogin() {
                this.isSubmitting = true;
                if (!this.isValid) {
                    Swal.fire({
                        icon: "error",
                        title: "Require Field",
                        text: "A required field is empty"
                    });
                    this.isSubmitting = false;
                } else {
                    let formData = new FormData();
                    formData.append("email", this.email);
                    formData.append("password", this.password);

                    axios.post("/a/auth/admin", formData).then((result) => {
                        if (result.status == 200) {
                            Swal.fire({
                                icon: "success",
                                title: "Successfully Logged in",
                                text: "Redirecting"
                            });
                            this.isSubmitting = false;
                        }
                    }).catch((err) => {
                        this.$toast.open({
                            message: err.response.data.messages,
                            type: "error",
                            duration: 20000,
                            dismissible: true
                        })
                        this.isSubmitting = false;
                    });
                }
            }
        },
    });
    login_app.use(VueToast.ToastPlugin);
    login_app.mount("#login_app")
</script>